@use 'sass:list';

@use '@kirbydesign/core/src/scss/utils';
@use '@kirbydesign/core/src/scss/base/item-typography';

/*
Angular's view encapsulation wrongly appends an `_ngcontent-xxx` selector
after the `:where()` pseudo class when it contains more than 1 selector.
The workaround is to create a separate `:where` selector for each slotted text-element type.

Using :where() has lower specifity than :is() and allows global typography classes
to be applied to slotted elements
*/
$base-typography-selectors: (':where(.kirby-item-title)');
@each $text-element in item-typography.$slotted-text-elements-base {
  $base-typography-selectors: list.append(
    $base-typography-selectors,
    ':where(#{$text-element})',
    comma
  );
}

@mixin item-typography() {
  @include utils.slotted(item-typography.$slotted-text-elements) {
    color: utils.get-text-color('black');
    display: block;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Needs to come before the base typography styles to allow for p.kirby-item-title to be applied
     as the selectors have the same specificity */
  @include utils.slotted(':where(p)') {
    font-size: utils.font-size('s');
    line-height: utils.line-height('s');
  }

  @include utils.slotted($base-typography-selectors) {
    font-size: utils.font-size('n');
    line-height: utils.line-height('n');
    font-weight: normal;
  }

  @include utils.slotted('[subtitle]', '[detail]', '.kirby-item-subtitle', '.kirby-item-detail') {
    font-size: utils.font-size('xs');
    line-height: utils.line-height('xs');
  }

  @include utils.slotted('[subtitle]:not(:last-child)', '.kirby-item-subtitle:not(:last-child)') {
    margin-bottom: utils.size('xxxs');
  }

  @include utils.slotted('[detail]', '.kirby-item-detail') {
    color: utils.get-text-color('semi-dark');
  }

  @include utils.slotted('[wrap]', '.kirby-item-wrap') {
    white-space: normal;
  }
}
